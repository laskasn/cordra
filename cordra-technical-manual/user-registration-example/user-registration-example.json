{
  "results": [
    {
      "id": "test/2894c4abfd866e164133",
      "type": "Schema",
      "content": {
        "identifier": "test/2894c4abfd866e164133",
        "name": "User",
        "schema": {
          "type": "object",
          "required": [
            "id",
            "username",
            "password",
            "email",
            "isActive"
          ],
          "properties": {
            "id": {
              "type": "string",
              "cordra": {
                "type": {
                  "autoGeneratedField": "handle"
                }
              }
            },
            "username": {
              "type": "string",
              "title": "Username",
              "cordra": {
                "preview": {
                  "showInPreview": true,
                  "isPrimary": true
                },
                "auth": "username"
              }
            },
            "password": {
              "type": "string",
              "format": "password",
              "title": "Password",
              "cordra": {
                "auth": "password"
              }
            },
            "email": {
              "type": "string",
              "format": "email",
              "title": "Email"
            },
            "publicKey": {
              "type": "object",
              "title": "Public Key",
              "cordra": {
                "auth": "publicKey"
              }
            },
            "requirePasswordChange": {
              "type": "boolean",
              "title": "Require Password Change",
              "description": "If true a new password must be set on next authentication.",
              "cordra": {
                "auth": "requirePasswordChange"
              }
            },
            "isActive": {
              "type": "boolean",
              "title": "Active?",
              "default": false,
              "cordra": {
                "auth": "accountActive"
              }
            },
            "activationKey": {
              "type": "string",
              "format": "password",
              "title": "Activation Key",
              "cordra": {
                "secureProperty": true
              }
            }
          }
        },
        "javascript": "var cordraUtil = require('cordraUtil');\n\nexports.beforeSchemaValidation = beforeSchemaValidation;\nexports.methods = {};\nexports.methods.activateAccountIfKeyIsValid = activateAccountIfKeyIsValid;\n\nvar emailConfig = {\n    \"fromAddress\": \"admin@example.com\",\n    \"subject\": \"testing javascript email\",\n    \"textTemplate\": \"Your activation key is {KEY}.\",\n    \"htmlTemplate\": \"<html><body><h1>Your activation key is {KEY}.</h1></body></html>\"\n};\n\nfunction beforeSchemaValidation(obj, context) {\n    if (!obj.content.id) obj.content.id = \"\";\n    if (!obj.content.password) obj.content.password = \"\";\n    if (!obj.content.email) obj.content.email = \"\";\n    if (isEmailConfigured() && !isValidEmail(obj.content.email)) {\n        throw \"Email is invalid.\"\n    }\n    if (context.isNew) {\n        obj.content.isActive = false;\n        obj.content.activationKey = generateRandomString();\n        sendKeyEmail(obj.content.email, obj.content.activationKey);\n    }\n    return obj;\n}\n\nfunction generateRandomString() {\n    return Math.random().toString(36).substr(2, 15);\n}\n\nfunction isValidEmail(email) {\n    var re = /\\S+@\\S+\\.\\S+/;\n    return re.test(email);\n}\n\nfunction sendKeyEmail(email, activationKey) {\n    if (isEmailConfigured()) {\n        var textMessage = emailConfig.textTemplate.replace(\"{KEY}\", activationKey);\n        var htmlMessage = emailConfig.htmlTemplate.replace(\"{KEY}\", activationKey);\n        sendEmail(email, emailConfig.fromAddress, emailConfig.subject, textMessage, htmlMessage);\n    } else {\n        print(email + \": \" + activationKey);\n    }\n}\n\nfunction sendEmail(toAddress, fromAddress, subject, textMessage, htmlMessage) {\n    // Java types\n    var EmailBuilder = Java.type(\"org.simplejavamail.email.EmailBuilder\");\n    var MailerBuilder = Java.type(\"org.simplejavamail.mailer.MailerBuilder\");\n    var TransportStrategy = Java.type(\"org.simplejavamail.mailer.config.TransportStrategy\");\n\n    // Build email\n    var serverConfig = getServerConfig();\n    var email = EmailBuilder.startingBlank()\n        .to(toAddress)\n        .from(fromAddress)\n        .withSubject(subject)\n        .withHTMLText(htmlMessage)\n        .withPlainText(textMessage)\n        .buildEmail();\n\n    var mailerBuilder = MailerBuilder\n        .withSMTPServer(serverConfig.serverAddress, serverConfig.serverPort, serverConfig.username, serverConfig.password)\n        .withSessionTimeout(10000);\n    if (serverConfig.enableStartTls) {\n        mailerBuilder = mailerBuilder.withTransportStrategy(TransportStrategy.SMTP_TLS);\n    } else if (serverConfig.enableStartTls) {\n        mailerBuilder = mailerBuilder.withTransportStrategy(TransportStrategy.SMTPS);\n    }\n    var mailer = mailerBuilder.buildMailer();\n    mailer.sendMail(email);\n}\n\nfunction getConfigFilePath() {\n    var dataDir = java.lang.System.getProperty(\"cordra.data\");\n    var filePath = java.nio.file.Paths.get(dataDir).resolve(\"emailServerConfig.json\");\n    return filePath;\n}\n\nfunction isEmailConfigured() {\n    var configFile = getConfigFilePath();\n    return java.nio.file.Files.exists(configFile);\n}\n\nfunction getServerConfig() {\n    var filePath = getConfigFilePath();\n    var json = new java.lang.String(java.nio.file.Files.readAllBytes(filePath));\n    return JSON.parse(json);\n}\n\nfunction activateAccountIfKeyIsValid(object, context) {\n    var activationKey = context.params.activationKey;\n    if (!activationKey) return false;\n    var success = cordraUtil.verifySecret(object, \"/activationKey\", activationKey);\n    if (!success) {\n        throw \"Could not verify key.\"\n    }\n    object.content.isActive = true;\n    delete object.content.activationKey;\n    return true;\n}\n"
      },
      "metadata": {
        "createdOn": 1562068733288,
        "createdBy": "admin",
        "modifiedOn": 1562090741886,
        "modifiedBy": "admin",
        "txnId": 1562090741875022
      }
    },
    {
      "id": "design",
      "type": "CordraDesign",
      "content": {
        "uiConfig": {
          "title": "User Registration Demo",
          "relationshipsButtonText": "Show Relationships",
          "allowUserToSpecifySuffixOnCreate": true,
          "searchResults": {
            "includeType": true,
            "includeModifiedDate": false,
            "includeCreatedDate": false
          },
          "initialQuery": "*:*",
          "initialSortFields": "/username",
          "initialFilter": "User",
          "navBarLinks": [
            {
              "type": "query",
              "title": "All Objects",
              "query": "*:*",
              "sortFields": "/name"
            },
            {
              "type": "typeDropdown",
              "title": "Show Only",
              "maxItems": 15
            }
          ],
          "numTypesForCreateDropdown": 15,
          "aclUiSearchTypes": [
            "User"
          ]
        },
        "authConfig": {
          "schemaAcls": {
            "User": {
              "defaultAclRead": [
                "public"
              ],
              "defaultAclWrite": [
                "self"
              ],
              "aclCreate": [
                "public"
              ],
              "aclMethods": {
                "instance": {
                  "activateAccountIfKeyIsValid": [
                    "public"
                  ]
                },
                "default": {
                  "instance": [
                    "admin"
                  ]
                }
              }
            },
            "CordraDesign": {
              "defaultAclRead": [
                "public"
              ],
              "defaultAclWrite": [],
              "aclCreate": []
            },
            "Schema": {
              "defaultAclRead": [
                "public"
              ],
              "defaultAclWrite": [],
              "aclCreate": []
            }
          },
          "defaultAcls": {
            "defaultAclRead": [
              "public"
            ],
            "defaultAclWrite": [
              "creator"
            ],
            "aclCreate": [
              "authenticated"
            ]
          }
        },
        "handleMintingConfig": {
          "prefix": "test",
          "defaultLinks": [
            {
              "type": "json",
              "primary": false
            },
            {
              "type": "ui",
              "primary": true
            }
          ],
          "ignoreHandleErrors": false
        }
      },
      "metadata": {
        "createdOn": 0,
        "modifiedOn": 1537466288993,
        "modifiedBy": "admin",
        "txnId": 305
      }
    }
  ]
}