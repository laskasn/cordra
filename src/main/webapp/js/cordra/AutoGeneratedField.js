(function(){
"use strict";

var window = window || self;

function AutoGeneratedField(textInput, editor) {

    var self = this;

    function constructor() {
        var fieldName;
        var prepend;
        var node = SchemaUtil.getDeepCordraSchemaProperty(editor.schema, 'type', 'autoGeneratedField');
        if (typeof node === 'object') {
            fieldName = node.type;
            prepend = node.prepend;
            if (!prepend && node.prependHandleMintingConfigPrefix) {
                var prefix = APP.getPrefix();
                if (prefix) prepend = ensureSlash(prefix);
            }
        } else {
            fieldName = node;
        }
        textInput.prop("disabled", true);
        if (textInput.val() === "") {
            var placeholder = "Auto generated field " + fieldName;
            if (prepend) placeholder += " (omitting " + prepend + ")";
            textInput.attr("placeholder", placeholder);
        }
        if (fieldName === "createdBy" || fieldName === "modifiedBy") {
            editor.jsoneditor.watch(editor.path, getTargetObject);
        }
    }

    function ensureSlash(prefix) {
        if (prefix.length === 0) return '/';
        if (prefix.substring(prefix.length - 1) === '/') {
            return prefix;
        } 
        return prefix + '/';
    }
    
    function getTargetObject() {
        var targetObjectId = textInput.val();
        if (targetObjectId && targetObjectId !== "admin") {
            APP.getObject(targetObjectId, onGotTargetObjectObject, onGotTargetObjectError);
        }
    }

    function onGotTargetObjectError(res) {
        console.log(res);
    }

    function onGotTargetObjectObject(res) {
        var objectId = res.id;
        var type = res.type;
        renderTargetObjectPreview(res.content, type, objectId);
    }

    function renderTargetObjectPreview(targetObject, type, objectId) {
        var link = $('<a></a>');
        $(textInput).after(link);
        var targetObjectSearchResult = {
                id : objectId,
                type : type,
                json : targetObject
        };
        var previewData = ObjectPreviewUtil.getPreviewData(targetObjectSearchResult);
        var linkText = objectId;
        for (var jsonPointer in previewData) {
            var previewDataItem = previewData[jsonPointer];
            if (previewDataItem.isPrimary) {
                linkText = previewDataItem.title + ": " + previewDataItem.previewJson;
            }
        }
        link.text(linkText);
        link.attr('href', "#objects/" + objectId);
    }

    constructor();
}

window.AutoGeneratedField = AutoGeneratedField;

})();
